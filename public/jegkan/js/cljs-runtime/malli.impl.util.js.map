{"version":3,"sources":["malli/impl/util.cljc"],"mappings":"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","names":["malli.impl.util/+max-size+","js/Number","malli.impl.util/-tagged","k","v","cljs.core/MapEntry","malli.impl.util/-tagged?","malli.impl.util/-invalid?","x","cljs.core/keyword-identical?","malli.impl.util/-map-valid","f","malli.impl.util/-map-invalid","this__4502__auto__","k__4503__auto__","this__4504__auto__","k60872","else__4505__auto__","G__60881","cljs.core/Keyword","path","in","schema","value","type","message","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__60882","vec__60883","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__60871","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this60873","other60874","cljs.core._EQ_","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","G__60902","this__4510__auto__","k__4511__auto__","pred__60904","expr__60905","cljs.core.assoc","this__4515__auto__","cljs.core/seq","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","malli.impl.util/SchemaError","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__60876","extmap__4542__auto__","G__60913","cljs.core/record?","malli.impl.util/->SchemaError","malli.impl.util/map->SchemaError","var_args","G__60917","malli.impl.util/-error","js/Error"],"sourcesContent":["(ns malli.impl.util\n  #?(:clj (:import (java.util.concurrent TimeoutException TimeUnit FutureTask)\n                   (clojure.lang MapEntry))))\n\n(def ^:const +max-size+ #?(:clj Long/MAX_VALUE, :cljs (.-MAX_VALUE js/Number)))\n\n(defn -tagged [k v] #?(:clj (MapEntry. k v), :cljs (MapEntry. k v nil)))\n(defn -tagged? [v] (instance? MapEntry v))\n\n(defn -invalid? [x] #?(:clj (identical? x :malli.core/invalid), :cljs (keyword-identical? x :malli.core/invalid)))\n(defn -map-valid [f v] (if (-invalid? v) v (f v)))\n(defn -map-invalid [f v] (if (-invalid? v) (f v) v))\n\n(defrecord SchemaError [path in schema value type message])\n\n(defn -error\n  ([path in schema value] (->SchemaError path in schema value nil nil))\n  ([path in schema value type] (->SchemaError path in schema value type nil)))\n\n#?(:clj\n   (defn ^:no-doc -run [^Runnable f ms]\n     (let [task (FutureTask. f), t (Thread. task)]\n       (try\n         (.start t) (.get task ms TimeUnit/MILLISECONDS)\n         (catch TimeoutException _ (.cancel task true) (.stop t) ::timeout)\n         (catch Exception e (.cancel task true) (.stop t) (throw e))))))\n\n#?(:clj\n   (defmacro -combine-n\n     [c n xs]\n     (let [syms (repeatedly n gensym)\n           g (gensym \"preds__\")\n           bs (interleave syms (map (fn [n] `(nth ~g ~n)) (range n)))\n           arg (gensym \"arg__\")\n           body `(~c ~@(map (fn [sym] `(~sym ~arg)) syms))]\n       `(let [~g (into [] ~xs) ~@bs]\n          (fn [~arg] ~body)))))\n\n#?(:clj\n   (defmacro -pred-composer\n     [c n]\n     (let [preds (gensym \"preds__\")\n           f (gensym \"f__\")\n           cases (mapcat (fn [i] [i `(-combine-n ~c ~i ~preds)]) (range 2 (inc n)))\n           else `(let [p# (~f (take ~n ~preds)) q# (~f (drop ~n ~preds))]\n                   (fn [x#] (~c (p# x#) (q# x#))))]\n       `(fn ~f [~preds]\n          (case (count ~preds)\n            0 (constantly true)\n            1 (first ~preds)\n            ~@cases\n            ~else)))))\n\n#?(:clj (def ^{:arglists '([[& preds]])} -every-pred (-pred-composer and 16)))\n#?(:clj (def ^{:arglists '([[& preds]])} -some-pred (-pred-composer or 16)))\n"]}