{"version":3,"sources":["re_statecharts/core.cljc"],"mappings":"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","names":["js/re-statecharts","js/re-statecharts.core","js/re-statecharts.core.get-state","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__68078","cljs.core/MultiFn","cljs.core.symbol","re-statecharts.core/get-state","db","id","cljs.core/type","js/re-statecharts.core.set-state","fexpr__68080","re-statecharts.core/set-state","new-state","cljs.core.get_in","cljs.core/assoc-in","cljs.core.update","cljs.core/dissoc","js/re-statecharts.core.epochs","re-statecharts.core/epochs","cljs.core/volatile!","re-statecharts.core/new-epoch","statecharts.integrations.re-frame/safe-inc","re_frame.core.reg_event_fx","p__68084","p__68085","map__68086","cljs.core/--destructure-map","vec__68087","cljs.core.nth","map__68090","_","machine","initialize-args","statecharts.core/initialize","cljs.core.assoc","re_frame.core.reg_event_db","p__68092","vec__68093","map__68096","p__68100","map__68102","re-statecharts.core/transition","epoch?","opts","fsm-event","data","more-data","temp__5753__auto__","current-state","statecharts.utils/ensure-event-map","and__4251__auto__","statecharts.integrations.re-frame/should-discard","statecharts.integrations.re-frame/log-discarded-event","next-state","G__68103","G__68104","G__68105","G__68106","statecharts.core/transition","G__68107","re-statecharts.core/open-interceptor","fsm","transition-opts","re_frame.core.__GT_interceptor","context","vec__68108","seq__68109","cljs.core/seq","first__68110","cljs.core/first","cljs.core/next","event-id","fsm-id","re_frame.core.get_coeffect","G__68111","cljs.core._EQ_","re-frame.core/assoc-coeffect","cljs.core.into","cljs.core.concat","vec__68112","seq__68113","first__68114","or__4253__auto__","re_frame.core.get_effect","G__68117","cljs.core/not","fexpr__68120","re-frame.core/assoc-effect","re-statecharts.core/closed-interceptor","vec__68140","seq__68141","first__68142","args","G__68149","p__68172","p__68173","map__68178","vec__68179","seq__68180","first__68181","new-db","cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","re-statecharts.core/Scheduler","re-statecharts.core/->Scheduler","ids","clock","open?","event","delay","statecharts.clock/setTimeout","re-frame.core/dispatch","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/deref","statecharts.clock/clearTimeout","var_args","G__68195","re-statecharts.core/integrate","js/Error","p__68198","p__68199","map__68200","map__68201","re_statecharts.core.integrate","statecharts.integrations.re-frame/default-opts","statecharts.clock/wall-clock","re-frame.core/reg-global-interceptor","re-frame.core/reg-fx","statecharts.core/machine","temp__5751__auto__","cljs.core/meta","re_frame.core.clear_global_interceptor","p__68203","vec__68204","p__68209","p__68210","map__68212","vec__68213","re_frame.core.reg_sub","p__68217","vec__68218","p__68222","vec__68226","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","re-statecharts.core/match-state","seq68230","G__68231","self__4851__auto__","state","pairs","G__68239","vec__68241","seq__68242","first__68243","vec__68244","seq__68245","first__68246","first-pair","rest-pairs","cljs.core.partition_all","G__68247","cljs.core/count","vec__68249","value","component","statecharts.core/matches","G__68253","cljs.core.ex_info","cljs.spec.alpha/def-impl","cljs.spec.alpha/and-spec-impl","cljs.core/vector?","cljs.spec.alpha/cat-impl","cljs.core/symbol?","cljs.core/any?"],"sourcesContent":["(ns re-statecharts.core\n  (:require\n   [clojure.spec.alpha :as s]\n   [re-frame.core :as f]\n   [statecharts.clock :as clock]\n   [statecharts.core :as fsm]\n   [statecharts.delayed :as delayed]\n   [statecharts.integrations.re-frame :as sc.rf]\n   [statecharts.utils :as u]))\n\n(defmulti get-state (fn [db id]\n                      (type id)))\n\n(defmulti set-state (fn [db id new-state]\n                      (type id)))\n\n(defmethod get-state :default\n  [db id]\n  (get-in db [::fsm-state id]))\n\n(defmethod set-state :default\n  [db id new-state]\n  (if new-state\n    (assoc-in db [::fsm-state id] new-state)\n    (update db ::fsm-state dissoc id)))\n\n(defonce epochs (volatile! {}))\n\n(defn new-epoch [id]\n  (get (vswap! epochs update id sc.rf/safe-inc) id))\n\n(f/reg-event-fx\n ::init\n  (fn [{db :db} [_ {:keys [id] :as machine} initialize-args]]\n    (when-not (get-state db id)\n      (let [new-state (-> (fsm/initialize machine initialize-args)\n                          (assoc :_epoch (new-epoch id)))]\n        {:db (set-state db id new-state)}))))\n\n(f/reg-event-db\n ::restart\n  (fn [db [_ {:keys [id] :as machine}]]\n    (set-state db id (-> (fsm/initialize machine)\n                         (assoc :_epoch (new-epoch id))))))\n\n(defn transition [db {:keys [id epoch?] :as machine} opts fsm-event data more-data]\n  (when-let [current-state (get-state db id)]\n    (let [fsm-event (u/ensure-event-map fsm-event)]\n      (if (and epoch?\n               (sc.rf/should-discard fsm-event (:_epoch current-state)))\n        (do\n          (sc.rf/log-discarded-event fsm-event)\n          db)\n        (let [next-state (fsm/transition machine\n                                         current-state\n                                         (cond-> (assoc fsm-event :data data)\n                                           (some? more-data)\n                                           (assoc :more-data more-data))\n                                         opts)]\n          ;; TODO Debug logging for state changes\n          (set-state db id next-state))))))\n\n(defn open-interceptor\n  [id fsm transition-opts]\n  (f/->interceptor\n   :id id\n\n   :before (fn intercept-init\n             [context]\n             (let [[event-id fsm-id data & more-data] (f/get-coeffect context :event)]\n               (cond-> context\n                 (= [::restart fsm-id] [event-id id]) (f/assoc-coeffect :event (into [event-id fsm] (concat data more-data))))))\n\n   :after (fn open-interceptor\n            [context]\n            (let [[event-id fsm-id data & more-data] (f/get-coeffect context :event)\n                  db (or (f/get-effect context :db)\n                         (f/get-coeffect context :db))]\n              (cond-> context\n                (and (= id fsm-id)\n                     (not (#{::start ::stop ::init ::restart} event-id)))\n                (f/assoc-effect :db (transition db fsm transition-opts event-id data more-data)))))))\n\n(defn closed-interceptor\n  [id fsm transition-opts]\n  (f/->interceptor\n   :id id\n\n   :before (fn closed-interceptor\n             [context]\n             (let [[event-id fsm-id & args] (f/get-coeffect context :event)]\n               (cond-> context\n\n                 (= [::transition fsm-id] [event-id id])\n                 (f/assoc-coeffect :event (into [event-id fsm transition-opts] args))\n\n                 (= [::restart fsm-id] [event-id id])\n                 (f/assoc-coeffect :event (into [event-id fsm] args)))))))\n\n(f/reg-event-fx\n ::transition\n  (fn [{db :db} [_ machine opts fsm-event data & more-data]]\n    (when-let [new-db (transition db machine opts fsm-event data more-data)]\n      {:db new-db})))\n\n(deftype Scheduler [fsm-id ids clock open?]\n  delayed/IScheduler\n  (schedule [_ event delay]\n    (let [id (clock/setTimeout clock #(f/dispatch (if open?\n                                                    event\n                                                    [::transition fsm-id event])) delay)]\n      (swap! ids assoc event id)))\n\n  (unschedule [_ event]\n    (when-let [id (get @ids event)]\n      (clock/clearTimeout clock id)\n      (swap! ids dissoc event))))\n\n(defn integrate\n  ([machine]\n   (integrate machine sc.rf/default-opts))\n  ([{:keys [id] :as machine}\n    {::keys [open?]\n     :keys  [clock] :as opts}]\n   (let [clock           (or clock (clock/wall-clock))\n         machine         (assoc machine :scheduler (Scheduler. id (atom {}) clock open?))\n         transition-opts (:transition-opts opts)]\n     (f/dispatch [::init machine])\n     (f/reg-global-interceptor (if open?\n                                 (open-interceptor id machine transition-opts)\n                                 (closed-interceptor id machine transition-opts))))))\n\n(f/reg-fx ::start\n  (fn [fsm]\n    (let [machine (fsm/machine fsm)]\n      (if-let [opts (meta fsm)]\n        (integrate machine opts)\n        (integrate machine)))))\n\n(f/reg-fx ::stop\n  (fn [id]\n    (f/clear-global-interceptor id)))\n\n(f/reg-event-fx ::start\n  (fn [_ [_ fsm]]\n    {::start fsm}))\n\n(f/reg-event-fx ::stop\n  (fn [{db :db} [_ id]]\n    {:db    (set-state db id nil)\n     ::stop id}))\n\n(f/reg-sub ::state\n  (fn [db [_ id]]\n    (:_state (get-state db id))))\n\n(f/reg-sub ::state-full\n  (fn [db [_ id]]\n    (get-state db id)))\n\n(defn match-state [state & pairs]\n  (loop [[first-pair & rest-pairs] (partition-all 2 pairs)]\n    (cond\n\n      (some-> first-pair seq count (= 2))\n      (let [[value component] first-pair]\n        (if (fsm/matches state value)\n          component\n          (recur rest-pairs)))\n\n      (some-> first-pair seq count (= 1))\n      (first first-pair)\n\n      :else\n      (throw (ex-info \"Could not find a component to match state.\"\n                      {:state state\n                       :pairs pairs})))))\n\n(s/def ::binding (s/and vector?\n                        (s/cat :subscription-symbol symbol? :fsm any?)))\n\n(defmacro with-fsm [binding & body]\n  (let [parsed (s/conform ::binding binding)]\n    (when (= ::s/invalid parsed)\n      (throw (ex-info \"with-fsm accepts exactly one binding pair, the subscription symbol and the FSM declaration.\"\n                      (s/explain-data ::binding binding))))\n    (let [{:keys [:subscription-symbol :fsm]} parsed]\n      `(reagent.core/with-let [~subscription-symbol (f/subscribe [::state (:id ~fsm)])\n                               _# (f/dispatch [::start ~fsm])]\n         ~@body\n         ~(list\n           'finally\n           ;; If we queue this event, it will break hot reloading as the stop will execute after the next start.\n           `(re-frame.core/dispatch-sync [::stop (:id ~fsm)]))))))\n"]}