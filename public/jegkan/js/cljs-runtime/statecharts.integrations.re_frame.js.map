{"version":3,"sources":["statecharts/integrations/re_frame.cljc"],"mappings":"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","names":["re_frame.core.reg_event_db","p__68012","vec__68013","cljs.core.nth","db","_","path","state","f","cljs.core/assoc-in","var_args","G__68020","statecharts.integrations.re-frame/connect-rf-db","js/Error","service","statecharts.integrations.re_frame.connect_rf_db","cljs.core/identity","statecharts.service/add-listener","new-state","re-frame.core/dispatch","re_frame.core.reg_event_fx","p__68024","vec__68025","fx","statecharts.integrations.re-frame/call-fx","effects","statecharts.integrations.re-frame/fx-action","statecharts.integrations.re-frame/make-rf-scheduler","transition-event","clock","p1__68033#","statecharts.delayed/make-scheduler","statecharts.integrations.re-frame/default-opts","statecharts.clock/wall-clock","js/statecharts","js/statecharts.integrations","js/statecharts.integrations.re-frame","js/statecharts.integrations.re-frame.epochs","statecharts.integrations.re-frame/epochs","cljs.core/volatile!","statecharts.integrations.re-frame/safe-inc","cljs.core.fnil","cljs.core/inc","statecharts.integrations.re-frame/new-epoch","id","cljs.core.get","cljs.core.update","statecharts.integrations.re-frame/should-discard","event","current-epoch","temp__5751__auto__","event-epoch","cljs.core.not_EQ_","statecharts.integrations.re-frame/canon-event","data","cljs.core/Keyword","cljs.core/map?","cljs.core.assoc","p__68039","map__68040","cljs.core/--destructure-map","statecharts.integrations.re-frame/log-discarded-event","type","msg","js/goog.DEBUG","js/console.log","G__68044","statecharts.integrations.re-frame/integrate","p__68045","p__68046","map__68047","map__68048","machine","statecharts.integrations.re_frame.integrate","map__68049","cljs.core/deref","machine*","or__4253__auto__","initialize-event","epoch?","cljs.core.get_in","G__68050","statecharts.utils/ensure-vector","p__68051","vec__68052","initialize-args","G__68055","G__68056","G__68057","statecharts.core/initialize","p__68060","vec__68061","fsm-event","args","statecharts.utils/ensure-event-map","more-data","cljs.core/count","cljs.core.subvec","and__4251__auto__","G__68065","G__68066","G__68067","statecharts.core/transition","G__68068","scheduler","statecharts.integrations.re-frame/with-epoch","epoch"],"sourcesContent":["(ns statecharts.integrations.re-frame\n  \"Integration with re-frame\"\n  (:require [re-frame.core :as rf]\n            [statecharts.core :as fsm]\n            [statecharts.clock :as clock]\n            [statecharts.utils :as u]\n            [statecharts.delayed :as fsm.d]\n            [statecharts.service :as service]))\n\n(rf/reg-event-db\n ::sync-state-update\n (fn [db [_ path state f]]\n   (assoc-in db path (f state))))\n\n(defn connect-rf-db\n  \"Update the given path of re-frame app-db whenever the state of the\n  fsm service changes.\"\n  ([service path]\n   (connect-rf-db service path identity))\n  ([service path f]\n   (service/add-listener\n    service\n    ;; listener id\n    [::connect-rf-db path]\n    (fn [_ new-state]\n      (rf/dispatch [::sync-state-update path new-state f])))))\n\n(rf/reg-event-fx\n ::call-fx\n (fn [_ [_ fx]]\n   fx))\n\n(defn call-fx\n  \"Create an action that when called would dispatch the provided\n  effects.\"\n  [effects]\n  (rf/dispatch [::call-fx effects]))\n\n(defn fx-action\n  \"Create an action that when called would dispatch the provided\n  effects.\"\n  [effects]\n  (fn []\n    (rf/dispatch [::call-fx effects])))\n\n(defn make-rf-scheduler [transition-event clock]\n  (fsm.d/make-scheduler #(rf/dispatch [transition-event %]) clock))\n\n(defn default-opts []\n  {:clock (clock/wall-clock)})\n\n(defonce epochs (volatile! {}))\n\n(def safe-inc (fnil inc 0))\n\n(defn new-epoch [id]\n  (get (vswap! epochs update id safe-inc) id))\n\n(defn should-discard [event current-epoch]\n  (if-let [event-epoch (:epoch event)]\n    (not= event-epoch current-epoch)\n    false))\n\n(defn canon-event [event data]\n  (if (keyword? event)\n    {:event event :data data}\n    (do\n      (assert (map? event))\n      (assoc event :data data))))\n\n(defn log-discarded-event [{:keys [type]}]\n  (let [msg (str \"event \" type \" ignored in new epoch\")]\n    #?(:cljs\n       (when ^boolean goog.DEBUG\n         (js/console.log msg)))\n    #?(:clj\n       (println msg))))\n\n(defn integrate\n  ([machine]\n   (integrate machine default-opts))\n  ([{:keys [id] :as machine} {:keys [clock]}]\n   (let [machine*\n         (volatile! machine)\n\n         clock\n         (or clock (clock/wall-clock))\n\n         {:keys [path initialize-event transition-event epoch?]}\n         (get-in machine [:integrations :re-frame])\n\n         path\n         (some-> path u/ensure-vector)]\n\n     (when initialize-event\n       (rf/reg-event-db\n        initialize-event\n        path\n        (fn [_ [_ initialize-args]]\n          (cond-> (fsm/initialize @machine* initialize-args)\n            epoch?\n            (assoc :_epoch (new-epoch id))))))\n\n     (when transition-event\n       (rf/reg-event-db\n        transition-event\n        path\n        (fn [db [_ fsm-event data :as args]]\n          (let [fsm-event (u/ensure-event-map fsm-event)\n                more-data (when (> (count args) 3)\n                            (subvec args 2))]\n            (if (and epoch? (should-discard fsm-event (:_epoch db)))\n              (do\n                (log-discarded-event fsm-event)\n                db)\n              (fsm/transition @machine* db\n                              ;; For 99% of the cases the fsm-event has 0 or 1 arg.\n                              ;; The first event arg is passed in :data key of the\n                              ;; event, the remaining are passed in :full-data.\n                              (cond-> (assoc fsm-event :data data)\n                                (some? more-data)\n                                (assoc :more-data more-data))))))))\n     (let [scheduler (make-rf-scheduler transition-event clock)]\n       (vswap! machine* assoc :scheduler scheduler))\n     @machine*)))\n\n(defn with-epoch [event epoch]\n  {:type event\n   :epoch epoch})\n"]}