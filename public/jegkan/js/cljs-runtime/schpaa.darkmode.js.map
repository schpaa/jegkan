{"version":3,"sources":["schpaa/darkmode.cljs"],"mappings":";AAMA,GAAA,QAAAA,mCAAAC,4CAAAC;AAAA;AAAA,AAAA,AAASC,kCAAW,6CAAA,7CAACC;;AAErB,sCAAA,tCAAOC,oFACJC,WAAWC,GAAGC;AADjB,AAEE,IAAAC,qBAAe,+CAAA,AAAAE,iDAAA,hGAACC,+DAAQT,oHAAYG,WAAWE;AAA/C,AAAA,oBAAAC;AAAA,AAAA,UAAAA,NAAWC;AAAX,AACE,AAACG,0BAAsBH;;AACvB,sHAAA,WAAAI,1HAACC,mDAAMZ,gCAAWa,iBAAOV;AAAzB,AAAqC,sDAAAQ,/CAACG,gEAAST;;;AAFjD;;;AAIF,uCAAA,vCAAOW,sFACJb,WAAWc,SAASC,OAAOb;AAD9B,AAAA,GAES,GAAA,aAAA,ZAAOY;AAFhB;AAAA,AAAA,MAAA,KAAAF,MAAA;;;AAAA,GAE0B,AAACI,oBAAIF;AAF/B;AAAA,AAAA,MAAA,KAAAF,MAAA;;;AAGE,IAAMR,MAAI,AAACa,mBAAeF,OAAOf,WAAW,iCAAA,/BAAI,AAACgB,oBAAIF;AAAT,AACG,QAACA,yCAAAA,iDAAAA,VAASC,6BAAAA;GADb;AAAA,AAEG,8BAAA,vBAACG,0GAAaJ,SAASC;;AAFtE,AAGE,oBAAMA;AAAN,AACE,6GAAA,tGAACN,mDAAMZ,gCAAWsB,sGAAUnB,WAAWE,UAAGE;;AAD5C;;;AAGJ,4CAAA,5CAAOgB,gGAAsBC;AAA7B,AACE,gFAAA,zEAACtB,oCAAeuB,6BAAyBD;;AAI3C,yDAAA,zDAACE,+IACwB,kBAAAC,PAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;UAAT,AAAAF,4CAAAD,WAAA,IAAA,jEAAWI;AAAX,AACE,kBAAA,lBAACC;;wEACGH,9CACA,qDAAA,rDAACI,oJAAiCF,9KAClC,mLAAA,mFAAA,6DAAA,5TAACV,+YAAsCU;;AAEtE,qBAAA,rBAACG,wHAEC,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAAaG;aAAb,AAAAD,4CAAAF,eAAA,pEAAsBnB;QAAtB,AAAAqB,4CAAAF,eAAA,/DAA6BhC;AAA7B,AACE,OAACW,qCAAgBS,6BAAyBe,SAAStB,OAAOb;;AAI9D,AAIA,2DAAA,3DAACoC,6LACW,WAAKX;AAAL,AACE,oBAAA,AAAAtB,gBAAK,oBAAA,pBAACkC;AAAN;;AAAA;;;AAGd,yDAAA,zDAACC,wIACgB,WAAAC,SAAcb;AAAd,AAAA,IAAAc,aAAAD;IAAAC,iBAAA,AAAAP,4BAAAO;aAAA,AAAAN,4CAAAM,eAAA,pEAAMf;AAAN,AACE,IAAMiB,mBAAiB,kBAAA,lBAAGC;AAA1B,AACE,AAACzB,0CAAqBwB;;AADxB,kDAAA,8VAAA,kDAAA,mFAAA,mFAAA,mGAAA,2CAAA,0EAAA,gDAAA,aAAA,6DAAA,WAAAD,rzBAEWhB,9CAAG,qDAAA,rDAACI,oJACM,4CAAA,qDAAA,/EAAI,AAAWa,uiBAEhBA;AALpB,AAOqB,8BAAA,mFAAA,1GAAC1B,gMAAoC,4CAAA,qDAAA,/EAAI,AAAAyB","names":["js/schpaa","js/schpaa.darkmode","js/schpaa.darkmode.listeners*","schpaa.darkmode/listeners*","cljs.core.atom","schpaa.darkmode/stop-listener!","event-type","id","k","temp__5753__auto__","key","cljs.core/deref","cljs.core.get_in","goog.events/unlistenByKey","p1__56032#","cljs.core.swap_BANG_","cljs.core/update","cljs.core.dissoc","js/Error","schpaa.darkmode/setup-listener!","callback","source","cljs.core/fn?","goog.events/listen","re-frame.core/dispatch","cljs.core/assoc-in","schpaa.darkmode/clear-all-listeners!","handler","goog.events/EventType.CHANGE","re_frame.core.reg_event_db","p__56033","vec__56034","cljs.core.nth","db","_","arg","cljs.core/tap>","cljs.core.assoc","re-frame.core/reg-fx","p__56037","map__56038","cljs.core/--destructure-map","cljs.core.get","dispatch","re_frame.core.reg_sub","schpaa.state/listen","re_frame.core.reg_event_fx","p__56040","map__56041","p1__56039#","darkmode-handler","js/window"],"sourcesContent":["(ns schpaa.darkmode\n  (:require [goog.debug]\n            [goog.events :as gevents]\n            [schpaa.state]\n            [re-frame.core :as rf]))\n\n(defonce listeners* (atom {}))\n\n(defn- stop-listener!\n  [event-type id k]\n  (when-let [key (get-in @listeners* [event-type k])]\n    (gevents/unlistenByKey key)\n    (swap! listeners* update event-type #(dissoc % k))))\n\n(defn- setup-listener!\n  [event-type callback source k]\n  {:pre [(some? callback) (fn? callback)]}\n  (let [key (gevents/listen source event-type (if (fn? callback)\n                                                #(callback source)\n                                                #(rf/dispatch [callback source])))]\n    (when source\n      (swap! listeners* assoc-in [event-type k] key))))\n\n(defn- clear-all-listeners! [handler]\n  (stop-listener! gevents/EventType.CHANGE handler \"screenmode\"))\n\n;region events\n\n(rf/reg-event-db\n  :os-screenmode-changed (fn [db [_ arg]]\n                           (tap> :os-screenmode-changed)\n                           (-> db\n                               (assoc :system-screenmode-setting arg)\n                               (assoc-in [:settings :pref-screenmode] arg))))\n\n(rf/reg-fx\n  :listen-to-screenmode-change\n  (fn [{:keys [dispatch source k]}]\n    (setup-listener! gevents/EventType.CHANGE dispatch source k)))\n\n;endregion\n\n(comment\n  (do\n    @(schpaa.state/listen :app/menu-direction)))\n\n(rf/reg-sub :app/user-screenmode\n            (fn [db]\n              (if @(schpaa.state/listen :app/dark-mode) :dark :light)\n              #_(get-in db [:settings :pref-screenmode] :auto)))\n\n(rf/reg-event-fx :app/setup-handlers\n                 (fn [{db :db} _]\n                   (let [darkmode-handler (. js/window matchMedia \"(prefers-color-scheme: dark)\")]\n                     (clear-all-listeners! darkmode-handler)\n                     {:db (-> db (assoc :system-screenmode-setting\n                                        (if (.-matches darkmode-handler) :dark :light)))\n                      :fx [[:listen-to-screenmode-change\n                            {:source   darkmode-handler\n                             :k        \"screenmode\"\n                             :dispatch #(rf/dispatch [:os-screenmode-changed (if (.-matches %) :dark :light)])}]]})))\n"]}