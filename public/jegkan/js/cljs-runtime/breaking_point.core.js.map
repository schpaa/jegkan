{"version":3,"sources":["breaking_point/core.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","p__57028","vec__57029","cljs.core.nth","map__57032","cljs.core/--destructure-map","cljs.core.get","_","breakpoints","debounce-ms","opts","re-frame.core/reg-cofx","coeffect","screen-width","or__4253__auto__","G__57033","js/window","G__57034","js/document","G__57035","screen-height","G__57037","G__57038","G__57039","cljs.core.assoc","p__57040","map__57041","breaking-point.core/set-screen-dimensions","db","cljs.core/assoc-in","re_frame.core.inject_cofx","p__57042","vec__57043","breaking-point.core/get-screen-width","cljs.core.get_in","breaking-point.core/get-screen-height","breaking-point.core/->get-screen","cljs.core.reduce","p__57046","vec__57047","prev-breakpoint","screen-key","breakpoint","cljs.core/reduced","cljs.core.partition_all","p__57050","vec__57051","breaking-point.core/get-orientation","breaking-point.core/register-subs","re_frame.core.reg_sub","orientation","cljs.core._EQ_","screen-keys","G__57057","cljs.core.map_indexed","cljs.core/vector","cljs.core.filter","p__57058","vec__57059","i","k","cljs.core/even?","cljs.core.mapv","cljs.core/second","seq__57062","cljs.core/seq","chunk__57063","count__57064","i__57065","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core.keyword","cljs.core/name","screen","p__57075","map__57076","breaking-point.core/set-breakpoints","re-frame.core/dispatch","re-frame.core/reg-fx"],"sourcesContent":["(ns breaking-point.core\n  (:require\n   [re-frame.core :as rf]\n   [re-frame-fx.dispatch]\n   ))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; PUBLIC API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(rf/reg-event-fx\n ::set-breakpoints\n (fn [_ [_ {:keys [breakpoints ;; required\n                   debounce-ms ;; optional\n                   ]\n            :as   opts}]]\n   {::set-breakpoints opts}))\n\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Implementation\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; COFX\n\n(rf/reg-cofx\n ::screen-dimensions\n (fn [coeffect]\n   (let [screen-width  (or (some-> js/window\n                                   .-innerWidth)\n                           (some-> js/document\n                                   .-documentElement\n                                   .-clientWidth)\n                           (some-> js/document\n                                   .-body\n                                   .-clientWidth))\n         screen-height (or (some-> js/window\n                                   .-innerHeight)\n                           (some-> js/document\n                                   .-documentElement\n                                   .-clientHeight)\n                           (some-> js/document\n                                   .-body\n                                   .-clientHeight))]\n     (assoc coeffect\n            :screen-width screen-width\n            :screen-height screen-height))))\n\n\n;; Events\n\n(defn set-screen-dimensions\n  [{:keys [db\n           screen-width\n           screen-height]} _]\n  {:db (-> db\n           (assoc-in [::breakpoints :screen-width] screen-width)\n           (assoc-in [::breakpoints :screen-height] screen-height))})\n\n(rf/reg-event-fx ::set-screen-dimensions\n                 [(rf/inject-cofx ::screen-dimensions)]\n                 set-screen-dimensions)\n\n(rf/reg-event-fx ::set-screen-dimensions-debounced\n                 (fn [_ [_ debounce-ms]]\n                   {:dispatch-debounce [{:id      ::calcaulate-width-after-resize\n                                         :timeout debounce-ms\n                                         :action  :dispatch\n                                         :event   [::set-screen-dimensions]}]}))\n\n\n;; Subs\n\n(defn get-screen-width [db _]\n  (get-in db [::breakpoints :screen-width]))\n\n(defn get-screen-height [db _]\n  (get-in db [::breakpoints :screen-height]))\n\n\n(defn ->get-screen [breakpoints]\n  (fn get-screen\n    [screen-width _]\n    (when screen-width\n      (reduce\n       (fn [prev-breakpoint [screen-key breakpoint]]\n         (if (or (nil? breakpoint)\n                 (and (< screen-width breakpoint)\n                      (>= screen-width prev-breakpoint)))\n           (reduced screen-key)\n           breakpoint))\n       0\n       (partition-all 2 breakpoints)))))\n\n\n(defn get-orientation\n  [[screen-width\n    screen-height] _]\n  (if (> screen-height\n         screen-width)\n    :portrait\n    :landscape))\n\n\n(defn register-subs [breakpoints]\n  (rf/reg-sub ::screen-width get-screen-width)\n  (rf/reg-sub ::screen-height get-screen-height)\n\n  (rf/reg-sub ::screen\n              :<- [::screen-width]\n              (->get-screen breakpoints))\n\n  (rf/reg-sub ::orientation\n              :<- [::screen-width]\n              :<- [::screen-height]\n              get-orientation)\n\n  (rf/reg-sub ::portrait?\n              :<- [::orientation]\n              (fn [orientation _]\n                (= orientation :portrait)))\n\n  (rf/reg-sub ::landscape?\n              :<- [::orientation]\n              (fn [orientation _]\n                (= orientation :landscape)))\n\n  (let [screen-keys (some->> breakpoints\n                             (map-indexed vector)\n                             (filter (fn [[i k]]\n                                       (even? i)))\n                             (mapv second))]\n    (doseq [screen-key screen-keys]\n      (rf/reg-sub (keyword \"breaking-point.core\"\n                           (str (name screen-key) \"?\"))\n                  :<- [::screen]\n                  (fn [screen _]\n                    (= screen\n                       screen-key))))))\n\n\n;; FX\n\n(defn set-breakpoints [{:keys [breakpoints\n                               debounce-ms]\n                        :as   opts}]\n  (register-subs breakpoints)\n  (rf/dispatch [::set-screen-dimensions])\n  (.addEventListener js/window \"resize\"\n                     #(if debounce-ms\n                        (rf/dispatch [::set-screen-dimensions-debounced debounce-ms])\n                        (rf/dispatch [::set-screen-dimensions]))\n                     true))\n\n(rf/reg-fx\n ::set-breakpoints\n set-breakpoints)\n"]}