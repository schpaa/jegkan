{"version":3,"sources":["schpaa/modal.cljs"],"mappings":"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","names":["schpaa.modal/default-dialog-timeout","schpaa.modal/default-dialog-short-timeout","schpaa.modal/animation-duration","schpaa.modal/clear-modal-state","G__70117","statecharts.core/assign","st","_","cljs.core.assoc","schpaa.modal/set-dirty-modal-state","G__70118","cljs.core/tap>","schpaa.modal/set-clean-modal-state","G__70119","schpaa.modal/set-brief-modal-state","G__70121","p__70123","map__70124","cljs.core/--destructure-map","cljs.core.get","data","more-data","_event","cljs.core/first","schpaa.modal/set-normal-modal-state","G__70129","p__70130","map__70131","schpaa.modal/set-forced-modal-state","G__70133","p__70136","map__70137","schpaa.modal/modal-machine","p__70141","map__70142","p__70144","map__70145","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","schpaa.modal/overlay-with","p__70154","map__70155","seq70150","G__70151","cljs.core/next","self__4851__auto__","short-timeout","modal?","on-close","modal-dim","content","cljs.core.concat","G__70156","cljs.core/Keyword","schpaa.modal/color-map","p__70158","map__70159","schpaa.modal/form-action","type","header","form-fn","footer","title","close-fn","flags","icon","button-bar","m","nrpk.fsm_helpers.send","G__70163","cljs.core.into","cljs.core/contains?","cljs.core.conj","cljs.core.apply","nrpk.fsm-helpers/send","cljs.core/some","or__4253__auto__","schpaa.icon/touch","schpaa.icon/small","cljs.core.mapcat","cljs.core/val","cljs.core/select-keys","schpaa.style/fbg'","p__70170","map__70171","schpaa.modal/form","dialog-type","map__70173","bg","bgp","bgf","bgt","p__70174","map__70175","schpaa.modal/render","show?","config-fn","node","cljs.core.atom","show-status","end-transition","reagent.core.atom","reagent.core.create_class","c","cljs.core/reset!","reagent.dom/dom-node","cljs.core/deref","cljs.core._EQ_","p__70176","map__70177","map__70178","map__70179","style","source","final-position"],"sourcesContent":["(ns schpaa.modal\n  (:require [schpaa.icon :as icon]\n            [reagent.core :as r]\n            [reagent.dom]\n            [schpaa.modal.msg :as msg]\n            [nrpk.fsm-helpers :refer [send]]\n            [statecharts.core :refer [assign]]\n            [schpaa.debug :as l]\n            [schpaa.button :as bu]\n            [schpaa.style :as st]\n            [clojure.set :as set]))\n\n(def default-dialog-timeout 5000)\n(def default-dialog-short-timeout 2000)\n(def animation-duration [:duration-300])\n\n;region fsm-modal-helpers\n\n(defn- clear-modal-state []\n  (assign (fn [st _] (assoc st\n                       :modal false\n                       :modal-forced false))))\n(defn- set-dirty-modal-state []\n  (assign (fn [st _]\n            (tap> \"set-dirty-modal-state\")\n            (assoc st :modal-dirty true))))\n\n(defn- set-clean-modal-state []\n  (assign (fn [st _]\n            (tap> \"set-clean-modal-state\")\n            (assoc st :modal-dirty false))))\n\n(defn- set-brief-modal-state\n  \"short-timeout ec55a6a\"\n  []\n  (assign (fn [st {:keys [data more-data] :as _event}]\n            (assoc st\n              :modal-short-timeout true\n              :modal-dim data\n              :modal-config-fn (:modal-config-fn (first more-data))\n              :modal-forced false\n              :modal true))))\n\n(defn- set-normal-modal-state []\n  (assign (fn [st {:keys [data more-data] :as _event}]\n            (assoc st\n              :modal-short-timeout false\n              :modal-dim data\n              :modal-config-fn (:modal-config-fn (first more-data))\n              :modal-forced false\n              :modal true))))\n\n(defn- set-forced-modal-state []\n  (assign (fn [st {:keys [data more-data] :as _event}]\n            (assoc st\n              :modal-short-timeout false\n              :modal-dim data\n              :modal-config-fn (:modal-config-fn (first more-data))\n              :modal-forced true))))\n\n;endregion\n\n(def modal-machine\n  {:initial :s.initial\n   :states  {:s.initial       {:entry (clear-modal-state)\n                               :on    {:e.show-locked             :s.locked\n                                       :e.show-with-timeout       :s.timeout\n                                       :e.show-with-short-timeout :s.short-timeout\n                                       :e.show                    :s.visible}}\n             :s.visible       {:entry (set-normal-modal-state)\n                               :on    {:e.dirty {:actions (set-dirty-modal-state)}\n                                       :e.clean {:actions (set-clean-modal-state)}\n                                       :e.hide  :s.initial}}\n             ;intent Showing again will close it\n             ;fixme BUG\n             ;:e.show :s.initial}}\n             :s.locked        {:entry (set-forced-modal-state)\n                               :on    {:e.hide :s.initial}}\n             ;intent Showing again will close it\n             ;fixme BUG\n             ;:e.show :s.initial}}\n             :s.short-timeout {:entry (set-brief-modal-state)\n\n\n                               :on    {:e.hide :s.initial}\n                               ;intent Showing again will close it\n                               ;fixme BUG\n                               ;:e.show-with-timeout :s.initial}\n                               :after [{:delay  (fn [_ {:keys [data]}] (:timeout data default-dialog-short-timeout))\n                                        :target :s.initial}]}\n             :s.timeout       {:entry (set-normal-modal-state)\n                               :on    {:e.hide :s.initial}\n                               ;intent Showing again will close it\n                               ;fixme BUG\n                               ;:e.show-with-timeout :s.initial}\n                               :after [{:delay  (fn [_ {:keys [data]}] (:timeout data default-dialog-timeout))\n                                        :target :s.initial}]}}})\n\n\n\n(defn overlay-with [{:keys [short-timeout modal? on-close modal-dim]} & content]\n  [:div.relative.h-full.cursor-default\n   [:div.fixed.inset-0\n    {:class    (concat\n                 animation-duration\n                 [:transition :bg-black]\n                 (if modal?\n                   (if short-timeout\n                     [:bg-opacity-0 :pointer-events-none :z-300]\n                     [(case modal-dim\n                        :weak-dim :bg-opacity-30\n                        :bg-opacity-80)\n                      :pointer-events-auto :z-300])\n                   [:bg-opacity-0 :pointer-events-none :z-300]))\n     :on-click on-close}]\n   content])\n\n(def color-map\n  {:form    {:bgt [:bg-gray-300 :text-gray-700\n                   :dark:bg-gray-600 :dark:text-gray-100]\n             :bgp [:bg-gray-300 :text-gray-700\n                   :dark:bg-gray-600 :dark:text-100]\n             :bg  [:bg-rose-400 :text-gray-700\n                   :dark:bg-gray-600 :dark:text-100]\n             :bgf [:bg-gray-600 :text-gray-200\n                   :dark:bg-gray-700 :dark:text-gray-100]}\n   :cover   {:bgt [:bg-gray-300 :text-black :font-bold :text-2xl]\n             :bgp [:bg-gray-300 :text-gray-700]\n             :bg  [:bg-gray-300 :text-gray-700]\n             :bgf [:bg-gray-900 :text-gray-200]}\n   :error   {:bgt [:bg-rose-500 :text-rose-300]\n             :bg  [:bg-rose-500 :text-rose-200]\n             :bgp [:bg-rose-500 :text-rose-100]\n             :bgf [:bg-rose-900 :text-rose-200]}\n   :message {:bgt [:bg-sky-500 :text-sky-50]\n             :bg  [:bg-alt :text-gray-100]\n             :bgp [:bg-alt :text-gray-100 :dark:bg-gray-500 :dark:text-gray-100]\n             :bgf [:text-white :bg-black]}\n   :confirm {:bgt [:bg-gray-50 :text-gray-700]\n             :bg  [:bg-gray-50 :text-gray-700]\n             :bgp [:bg-gray-500 :text-gray-100]\n             :bgf [:text-white :bg-alt]}})\n\n(defn form-action\n  [{:keys [type header form-fn footer title close-fn flags icon button-bar]\n    :as   m\n    :or   {close-fn (fn [] (send :e.hide))}}]\n  (let [flags (cond-> (into #{} flags)\n                (contains? type [:popup :message]) (conj :timeout))]\n    (apply send [(cond\n                   (:forced flags) :e.show-locked\n                   (:short-timeout flags) :e.show-with-short-timeout\n                   (:timeout flags) :e.show-with-timeout\n                   :else :e.show)\n                 (if (some #{:weak-dim} flags) :weak-dim :normal-dim)\n                 {:modal-config-fn\n                  (fn []\n                    (conj\n                      ;intent Hardwired\n                      {:style       {:final-position [:-translate-y-100]}\n                       :dialog-type (or type :form)\n                       :flags       (conj flags :wide)}\n                      ;intent carry over everything\n                      m\n                      ;intent Soft\n                      (if title\n                        {:header [:div.grid.gap-2.p-4.text-base.font-normal.w-full\n                                  {:style {:grid-template-columns \"2rem 1fr min-content\"}}\n                                  (if icon\n                                    [:<>\n                                     [:div.self-center.justify-self-start [icon/touch icon]]\n                                     [:div.self-center title]]\n                                    [:div.col-span-2.self-center.font-bold title])\n                                  (when (some #{:close-button} flags)\n                                    [:div {:on-click close-fn} [icon/small :cross-out]])]}\n                        (if (string? header)\n                          {:header [:div.p-4 {:class (mapcat val (select-keys (st/fbg' :dialog-header) [:bg :fg :hd]))} header]}\n                          {:header header}))\n                      (if footer\n                        {:footer (cond\n                                   (string? footer) [:div.px-4.py-4.text-sm.space-y-2 footer]\n                                   :else (into [:div.px-4.py-4.text-sm.space-y-2] footer))})\n                      {:button-bar button-bar\n                       :form-fn    form-fn}))}])))\n\n(defn form [{:keys [type header form-fn footer dialog-type flags] :as m}]\n  (let [{:keys [bg bgp bgf bgt]} (get color-map dialog-type)]\n    [:div.relative.top-0\n     {:class bg}\n\n     (when header\n       header)\n\n     (when form-fn\n       [:div.p-4\n        {:class bgp}\n        (form-fn m)])\n\n     (when footer\n       [:div\n        {:class (concat bgf [:flex :items-center :justify-between :xpx-2])}\n        footer])]))\n\n(defn render\n  \"add facilities to unmount a component when a transition is completed and\n  the component is (supposedly) off-screen after the animation.\"\n  [{:keys [show? config-fn]}]\n  (let [node (atom nil)\n        show-status (atom nil)\n        end-transition (r/atom :hiding)]\n    (r/create-class\n      {:display-name\n       \"modal-presenting-layer\"\n\n       :component-did-mount\n       (fn [c]\n         (let [_ (reset! node (reagent.dom/dom-node c))]\n           (.addEventListener @node \"transitioncancel\"\n                              (fn []\n                                ;intent ?\n                                (if (= :hiding @end-transition)\n                                  (reset! show-status false)\n                                  (reset! show-status true))))\n\n           (.addEventListener @node \"transitionend\"\n                              (fn []\n                                (if @show-status\n                                  (reset! end-transition :showing)\n                                  (reset! end-transition :hiding))))))\n\n       :reagent-render\n       ;intent This is embedding a smaller component...\n       (fn [{:keys [show? config-fn]}]\n         (let [;todo Possibly move this into the reagent-render method\n               {:keys [dialog-type flags style source] :as m} (if (some? config-fn) (config-fn))\n               {:keys [final-position]\n                :or   {final-position [:translate-y-100]}} style]\n\n           (reset! show-status show?)\n\n           [:div.fixed.inset-x-1.select-none\n            {:class (concat (if (some #{:cover} flags) [:max-w-sm :top-32 :rounded])\n                            (if (= :bottom source)\n                              [:bottom-0 :rounded-t-lg]\n                              [:top-0 :rounded-b-lg])\n                            (if (some #{:wide} flags) [:max-w-sm] [:max-w-xs])\n                            [:overflow-hidden :transition :transform]\n                            animation-duration\n                            (if (or (= :showing @end-transition) @show-status) [:z-400 :h-auto :mx-auto :shadow :drop-shadow-xl :filter])\n                            (if @show-status final-position))\n\n             :style (when-not @show-status\n                      (if (some #{:cover} flags)\n                        {:transform \"translate(0,-150%)\"}\n                        (if (= :bottom source)\n                          {:transform \"translate(0,110%)\"}\n                          {:transform \"translate(0,-110%)\"})))}\n\n            ;intent ...picked up here\n            (when-not (and (= false @show-status) (= :hiding @end-transition))\n              (form m))]))})))\n"]}