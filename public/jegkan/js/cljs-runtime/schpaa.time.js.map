{"version":3,"sources":["schpaa/time.cljs"],"mappings":"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","names":["var_args","G__75449","schpaa.time/flex-date","js/Error","p__75451","map__75452","cljs.core/--destructure-map","cljs.core.get","time-class","if-never","dt","time-fn","with-let75455","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__51926__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init75456","cljs.core/not","res75457","p1__75447#","destroy__51925__auto__","reagent.ratom/reactive?","current-time","reagent.core.atom","tick.core/now","state","re_frame.core.subscribe","timer","js/setInterval","cljs.core/reset!","re-frame.core/dispatch","cljs.core.concat","cljs.core/deref","tick.core.format","G__75467","js/clearInterval","schpaa.time/x","timestamp","temp__5753__auto__","tm","G__75471","times.api/ms->local-time","schpaa.time.flex_date","_i","times.api/relative-local-time","schpaa.time/x'","G__75476","schpaa.time/y","timeinstant","schpaa.time/y'"],"sourcesContent":["(ns schpaa.time\n  (:require [reagent.core :as r]\n            [tick.core :as t']\n            [times.api :as t]\n            [re-frame.core :as rf]))\n\n(defn flex-date\n  ([{:keys [time-class if-never]} dt time-fn]\n   (r/with-let [current-time (r/atom (t'/now))\n                state (rf/subscribe [:app/show-relative-time])\n                timer (js/setInterval #(reset! current-time (t'/now)) 1000)]\n               [:div.truncate.inline\n                {:on-click #(do\n                              (.stopPropagation %)\n                              (rf/dispatch [:app/show-relative-time-toggle]))}\n                [:span {:class (concat\n                                 [:cursor-pointer :hover:underline]\n                                 time-class)}\n                 (if (some? dt)\n                   (if @state\n                     (t'/format \"YYYY-MM-dd 'kl' HH:mm:SS\" dt)\n                     (time-fn @current-time))\n                   if-never)]]\n               (finally js/clearInterval timer)))\n  ([dt]\n   [flex-date {} dt]))\n\n(defn x [timestamp]\n  (when-let [tm (some-> ^js timestamp .toDate t/ms->local-time)]\n    (schpaa.time/flex-date {} tm (fn [_i] (t/relative-local-time\n                                            {:past-prefix           \"\"\n                                             ;:rounding-at :hours\n                                             :progressive-rounding? true}\n                                            tm)))))\n\n(defn x' [timestamp]\n  (when-let [tm (some-> ^js timestamp .toDate t/ms->local-time)]\n    (schpaa.time/flex-date {} tm (fn [_i] (t/relative-local-time\n                                            {:past-prefix           \"endret for\"\n                                             :progressive-rounding? true}\n                                            tm)))))\n\n#_{:progressive-rounding? true\n   :past-postfix          \"siden\"\n   :past-prefix           \"endret\"}\n\n(defn y [timeinstant]\n  (when-let [tm timeinstant]\n    (schpaa.time/flex-date {} tm (fn [_i] (t/relative-local-time\n                                            {:past-prefix           \"for\"\n                                             :progressive-rounding? true}\n                                            tm)))))\n\n(defn y' [timeinstant]\n  (when-let [tm timeinstant]\n    (schpaa.time/flex-date {} tm (fn [_i] (t/relative-local-time\n                                            {:past-prefix           \"Oppdatert for\"\n                                             :progressive-rounding? true}\n                                            tm)))))"]}