{"version":3,"sources":["fork/re_frame.cljs"],"mappings":"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","names":["fork.re-frame/set-waiting","db","path","input-name","bool","fork.core/set-waiting","fork.re-frame/set-submitting","state","fork.core/set-submitting","fork.re-frame/set-server-message","message","fork.core/set-server-message","fork.re-frame/set-error","fork.core/set-error","fork.re-frame/retrieve-event-value","evt","fork.core/element-value","re_frame.core.reg_event_db","p__74300","vec__74301","cljs.core.nth","_","config","set-waiting?","fork.core/config-set-waiting?","input-names","G__74304","cljs.core/seq","cljs.core.update_in","m","cljs.core.apply","cljs.core/update","cljs.core/dissoc","cljs.core/assoc-in","cljs.core.concat","p__74308","vec__74309","input-key","re_frame.core.reg_sub","p__74314","vec__74316","cljs.core.get_in","p__74319","vec__74320","cljs.core._EQ_","cljs.core/count","cljs.core.dissoc","cljs.core/first","cljs.core/butlast","cljs.core/last","fork.re-frame/field-array","props","component","fork.core/field-array","fork.re-frame/form","p1__74332#","p1__74326#","p1__74331#","p1__74330#","p1__74328#","p1__74329#","p1__74327#","fork.core/initialize-state","p","and__4251__auto__","cljs.core/vector?","cljs.core/Keyword","cljs.core/PersistentVector","form-id","or__4253__auto__","cljs.core.gensym","handlers","k","fork.core/touched","ks","fork.core/set-touched","fork.core/set-untouched","fork.core/set-values","fork.core.disable","fork.core.enable","fork.core/disabled?","fork.core/normalize-name","fork.core/set-handle-change","fork.core/set-handle-blur","fork.core/handle-change","fork.core/handle-blur","callback","fork.core/send-server-request","cljs.core.merge","re-frame.core/dispatch","p__74340","vec__74341","cljs.core/reset!","reagent.core.create_class","temp__5753__auto__","on-mount","cljs.core/deref","p1__74333#","re_frame.core.subscribe","validation","val-fn","fork.core/handle-validation","server-validation","fork.core/resolve-server-validation","on-submit-server-message","fork.core/dirty","fork.core/handle-submit"],"sourcesContent":["(ns fork.re-frame\n  (:require\n   [fork.core :as core]\n   [reagent.core :as r]\n   [re-frame.core :as rf]))\n\n(defn set-waiting\n  [db path input-name bool]\n  (core/set-waiting db path input-name bool))\n\n(defn set-submitting\n  [state path bool]\n  (core/set-submitting state path bool))\n\n(defn set-server-message\n  [db path message]\n  (core/set-server-message db path message))\n\n(defn set-error\n  [state path input-name message]\n  (core/set-error state path input-name message))\n\n(defn retrieve-event-value\n  [evt]\n  (core/element-value evt))\n\n(rf/reg-event-db\n ::server-dispatch-logic\n (fn [db [_ config path]]\n   (let [set-waiting? (core/config-set-waiting? config)\n         input-names (:clean-on-refetch config)]\n     (cond-> db\n       (seq input-names) (update-in path (fn [m] (apply update m :server dissoc input-names)))\n       set-waiting? (assoc-in (concat path [:server (:name config) :waiting?]) true)))))\n\n(rf/reg-event-db\n ::server-set-waiting\n (fn [db [_ path input-key bool]]\n   (assoc-in db (concat path [:server input-key :waiting?]) bool)))\n\n(rf/reg-sub\n ::db\n (fn [db [_ path]]\n   (get-in db path)))\n\n(rf/reg-event-db\n ::clean\n (fn [db [_ path]]\n   (if (= 1 (count path))\n     (dissoc db (first path))\n     (update-in db (butlast path) dissoc (last path)))))\n\n(defn field-array\n  [props component]\n  [core/field-array props component])\n\n(defn form\n  [props _]\n  (let [state (core/initialize-state props)\n        p (:path props)\n        path (cond\n               (and p (vector? p)) p\n               (keyword? p) (vector p)\n               :else [::global])\n        form-id (or (:form-id props) (str (gensym)))\n        handlers {:touched (fn [k] (core/touched state k))\n                  :set-touched (fn [& ks] (core/set-touched ks state))\n                  :set-untouched (fn [& ks] (core/set-untouched ks state))\n                  :set-values #(core/set-values % state)\n                  :disable (fn [& ks] (core/disable state ks))\n                  :enable (fn [& ks] (core/enable state ks))\n                  :disabled? #(core/disabled? state %)\n                  :normalize-name #(core/normalize-name % props)\n                  :set-handle-change #(core/set-handle-change % state)\n                  :set-handle-blur #(core/set-handle-blur % state)\n                  :handle-change #(core/handle-change % state)\n                  :handle-blur #(core/handle-blur % state)\n                  :send-server-request\n                  (fn [config callback]\n                    (core/send-server-request\n                     callback (merge config\n                                     props\n                                     {:path path\n                                      :state state\n                                      :server-dispatch-logic\n                                      #(rf/dispatch [::server-dispatch-logic config path])})))\n                  :reset (fn [& [m]]\n                           (reset! state (merge (when (:keywordize-keys props)\n                                                  {:keywordize-keys true})\n                                                {:values {} :touched #{}}\n                                                m))\n                           (rf/dispatch [::clean path]))}]\n    (r/create-class\n     {:component-did-mount\n      #(when-let [on-mount (:component-did-mount props)]\n         (on-mount handlers))\n      :component-will-unmount\n      (fn []\n        (when (:clean-on-unmount? props)\n          (rf/dispatch [::clean path])))\n      :reagent-render\n      (fn [props component]\n        (let [db @(rf/subscribe [::db path])\n              validation (when-let [val-fn (:validation props)]\n                           (core/handle-validation @state val-fn))\n              server-validation (core/resolve-server-validation (:server db))\n              on-submit-server-message (:server-message db)]\n          [component\n           {:props (:props props)\n            :state state\n            :db db\n            :path path\n            :form-id form-id\n            :values (:values @state)\n            :dirty (core/dirty (:values @state) (merge (:initial-values @state)\n                                                       (:touched-values @state)))\n            :errors validation\n            :server-errors server-validation\n            :on-submit-server-message on-submit-server-message\n            :touched (:touched handlers)\n            :set-touched (:set-touched handlers)\n            :set-untouched (:set-untouched handlers)\n            :submitting? (:submitting? db)\n            :attempted-submissions (or (:attempted-submissions @state) 0)\n            :successful-submissions (or (:successful-submissions @state) 0)\n            :set-values (:set-values handlers)\n            :disable (:disable handlers)\n            :enable (:enable handlers)\n            :disabled? (:disabled? handlers)\n            :normalize-name (:normalize-name handlers)\n            :set-handle-change (:set-handle-change handlers)\n            :set-handle-blur (:set-handle-blur handlers)\n            :handle-change (:handle-change handlers)\n            :handle-blur (:handle-blur handlers)\n            :send-server-request (:send-server-request handlers)\n            :reset (:reset handlers)\n            :handle-submit #(core/handle-submit % (merge props\n                                                         {:state state\n                                                          :path path\n                                                          :server (:server db)\n                                                          :form-id form-id\n                                                          :validation validation\n                                                          :already-submitting? (:submitting? db)\n                                                          :reset (:reset handlers)}))}]))})))\n"]}