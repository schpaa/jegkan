{"version":3,"sources":["malli/transform.cljc"],"mappings":"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","names":["malli.transform/*max-compile-depth*","malli.transform/-interceptor","?interceptor","schema","options","cljs.core/fn?","cljs.core/map?","cljs.core/contains?","compiled","cljs.core.assoc","malli.core._fail_BANG_","temp__5751__auto__","interceptor","G__67158","G__67159","G__67160","fexpr__67161","cljs.core.merge","cljs.core.dissoc","cljs.core/coll?","cljs.core.reduce","p__67166","p__67167","map__67168","cljs.core/--destructure-map","cljs.core.get","map__67169","enter","leave","new-enter","new-leave","p1__67151#","and__4251__auto__","G__67170","or__4253__auto__","p1__67152#","G__67171","p1__67153#","cljs.core.keep","cljs.core/ifn?","p1__67180#","malli.transform/-safe","f","e67183","js/Error","_","malli.transform/-string->long","x","e67184","x'","cljs.core/re-find","cljs.core.subs","js/parseInt","js/isNaN","js/Number.MAX_SAFE_INTEGER","js/Number.MIN_SAFE_INTEGER","malli.transform/-string->double","e67187","js/parseFloat","malli.transform/-number->double","malli.transform/-string->keyword","cljs.core.keyword","malli.transform/-string->boolean","cljs.core._EQ_","malli.transform/-string->uuid","e67191","cljs.core/uuid","malli.transform/-string->date","e67192","js/Date","js/goog.date.UtcDateTime.fromIsoString","malli.transform/-string->symbol","cljs.core.symbol","malli.transform/-string->nil","malli.transform/-any->string","malli.transform/-any->any","malli.transform/-date->string","cljs.core/inst?","e67195","p1__67200#","malli.transform/-transform-map-keys","G__67202","cljs.core.into","cljs.core.map","p__67204","vec__67205","cljs.core.nth","k","v","malli.transform/-sequential->set","cljs.core/set?","cljs.core/sequential?","cljs.core/set","malli.transform/-sequential->vector","cljs.core/vector?","cljs.core/vec","malli.transform/-sequential-or-set->vector","malli.transform/-sequential-or-set->seq","cljs.core/seq","malli.transform/-json-decoders","malli.transform/-json-encoders","malli.core/-keyword->string","malli.transform/-string-decoders","malli.transform/-string-encoders","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","malli.transform/transformer","seq67244","self__4852__auto__","?transformers","->data","ts","default","name","key","->eval","cljs.core/reduce-kv","malli.core.eval","->chain","malli.core._comp","malli.core/-transformer-chain","malli.core/-into-transformer","chain","cljs.core/identity","p1__67241#","cljs.core.mapcat","chain'","p1__67242#","cljs.core.mapv","G__67253","cljs.core/name","js/malli","js/malli.transform","js/malli.transform.t_malli$transform67257","malli.transform/t_malli$transform67257","_67259","meta67258","cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","malli.transform/->t_malli$transform67257","method","p__67266","map__67267","map__67268","acc","transformers","malli.core.options","G__67270","malli.core.properties","G__67272","malli.core.type_properties","malli.core.type","G__67282","malli.transform/json-transformer","p__67284","map__67285","malli.transform.json_transformer","json-vectors","map-of-key-decoders","malli.transform.transformer","G__67287","malli.core.children","cljs.core/first","G__67286","malli.transform/string-transformer","G__67304","malli.transform/strip-extra-keys-transformer","p__67307","map__67308","malli.transform.strip_extra_keys_transformer","accept","p1__67296#","malli.core/properties","transform","ks","G__67312","malli.core.entries","cljs.core/not","cljs.core/keys","p__67317","map__67318","malli.transform/key-transformer","decode","encode","types","stage","cljs.core/zipmap","cljs.core.repeat","G__67332","malli.transform/default-value-transformer","p__67336","map__67337","malli.transform.default_value_transformer","defaults","get-default","temp__5755__auto__","G__67338","G__67339","p1__67323#","set-default","temp__5757__auto__","add-defaults","p__67347","vec__67349","map__67352","optional","malli.transform/collection-transformer","coders"],"sourcesContent":["(ns malli.transform\n  #?(:cljs (:refer-clojure :exclude [Inst Keyword UUID]))\n  (:require #?@(:cljs [[goog.date.UtcDateTime]\n                       [goog.date.Date]])\n            [malli.core :as m])\n  #?(:clj (:import (java.util Date UUID)\n                   (java.time Instant ZoneId)\n                   (java.time.format DateTimeFormatter DateTimeFormatterBuilder)\n                   (java.time.temporal ChronoField))))\n\n(def ^:dynamic *max-compile-depth* 10)\n\n(defn -interceptor\n  \"Utility function to convert input into an interceptor. Works with functions,\n  map and sequence of those.\"\n  [?interceptor schema options]\n  (cond\n\n    (fn? ?interceptor)\n    {:enter ?interceptor}\n\n    (and (map? ?interceptor) (contains? ?interceptor :compile))\n    (let [compiled (::compiled options 0)\n          options (assoc options ::compiled (inc ^long compiled))]\n      (when (>= ^long compiled ^long *max-compile-depth*)\n        (m/-fail! ::too-deep-compilation {:this ?interceptor, :schema schema, :options options}))\n      (if-let [interceptor (-interceptor ((:compile ?interceptor) schema options) schema options)]\n        (merge\n          (dissoc ?interceptor :compile)\n          interceptor)))\n\n    (and (map? ?interceptor)\n         (or (contains? ?interceptor :enter)\n             (contains? ?interceptor :leave))) ?interceptor\n\n    (coll? ?interceptor)\n    (reduce\n      (fn [{:keys [enter leave]} {new-enter :enter new-leave :leave}]\n        (let [enter (if (and enter new-enter) #(new-enter (enter %)) (or enter new-enter))\n              leave (if (and leave new-leave) #(leave (new-leave %)) (or leave new-leave))]\n          {:enter enter :leave leave}))\n      (keep #(-interceptor % schema options) ?interceptor))\n\n    (nil? ?interceptor) nil\n\n    (ifn? ?interceptor)\n    {:enter ?interceptor}\n\n    :else (m/-fail! ::invalid-transformer {:value ?interceptor})))\n\n(defn -safe [f] #(try (f %) (catch #?(:clj Exception, :cljs js/Error) _ %)))\n\n;;\n;; from strings\n;;\n\n(defn -string->long [x]\n  (if (string? x)\n    (try\n      #?(:clj  (Long/parseLong x)\n         :cljs (let [x' (if (re-find #\"\\D\" (subs x 1)) ##NaN (js/parseInt x 10))]\n                 (cond\n                   (js/isNaN x') x\n                   (> x' js/Number.MAX_SAFE_INTEGER) x\n                   (< x' js/Number.MIN_SAFE_INTEGER) x\n                   :else x')))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn -string->double [x]\n  (if (string? x)\n    (try\n      #?(:clj  (Double/parseDouble x)\n         :cljs (let [x' (js/parseFloat x)] (if (js/isNaN x') x x')))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn -number->double [x]\n  (if (number? x) (double x) x))\n\n(defn -string->keyword [x]\n  (if (string? x) (keyword x) x))\n\n(defn -string->boolean [x]\n  (if (string? x)\n    (cond\n      (= \"true\" x) true\n      (= \"false\" x) false\n      :else x)\n    x))\n\n(defn -string->uuid [x]\n  (if (string? x)\n    (try\n      #?(:clj  (UUID/fromString x)\n         ;; http://stackoverflow.com/questions/7905929/how-to-test-valid-uuid-guid\n         :cljs (if (re-find #\"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\" x)\n                 (uuid x)\n                 x))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n#?(:clj\n   (def ^DateTimeFormatter +string->date-format+\n     (-> (DateTimeFormatterBuilder.)\n         (.appendPattern \"yyyy-MM-dd['T'HH:mm:ss]\")\n         (.optionalStart)\n         (.appendFraction ChronoField/MICRO_OF_SECOND, 0, 9, true)\n         (.optionalEnd)\n         (.optionalStart)\n         (.appendOffset \"+HHMMss\", \"Z\")\n         (.optionalEnd)\n         (.optionalStart)\n         (.appendOffset \"+HH:MM:ss\", \"Z\")\n         (.optionalEnd)\n         (.parseDefaulting ChronoField/HOUR_OF_DAY 0)\n         (.parseDefaulting ChronoField/OFFSET_SECONDS 0)\n         (.toFormatter))))\n\n(defn -string->date [x]\n  (if (string? x)\n    (try\n      #?(:clj  (Date/from (Instant/from (.parse +string->date-format+ x)))\n         :cljs (js/Date. (.getTime (goog.date.UtcDateTime.fromIsoString x))))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n#?(:clj\n   (defn -string->decimal [x]\n     (if (string? x)\n       (try\n         (BigDecimal. ^String x)\n         (catch Exception _ x))\n       x)))\n\n(defn -string->symbol [x]\n  (if (string? x) (symbol x) x))\n\n(defn -string->nil [x]\n  (if (= \"\" x) nil x))\n\n;;\n;; misc\n;;\n\n(defn -any->string [x]\n  (if-not (nil? x) (str x)))\n\n(defn -any->any [x] x)\n\n#?(:clj\n   (def ^DateTimeFormatter +date->string-format+\n     (-> (DateTimeFormatter/ofPattern \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\")\n         (.withZone (ZoneId/of \"UTC\")))))\n\n(defn -date->string [x]\n  (if (inst? x)\n    (try\n      #?(:clj  (.format +date->string-format+ (Instant/ofEpochMilli (inst-ms x)))\n         :cljs (.toISOString x))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn -transform-map-keys [f]\n  #(cond->> % (map? %) (into {} (map (fn [[k v]] [(f k) v])))))\n\n;;\n;; sequential\n;;\n\n(defn -sequential->set [x]\n  (cond\n    (set? x) x\n    (sequential? x) (set x)\n    :else x))\n\n(defn -sequential->vector [x]\n  (cond\n    (vector? x) x\n    (sequential? x) (vec x)\n    :else x))\n\n;;\n;; sequential or set\n;;\n\n(defn -sequential-or-set->vector [x]\n  (cond\n    (vector? x) x\n    (set? x) (vec x)\n    (sequential? x) (vec x)\n    :else x))\n\n(defn -sequential-or-set->seq [x]\n  (cond\n    (vector? x) (seq x)\n    (set? x) (seq x)\n    :else x))\n\n;;\n;; decoders\n;;\n\n(defn -json-decoders []\n  {'ident? -string->keyword\n   'simple-ident? -string->keyword\n   'qualified-ident? -string->keyword\n\n   'keyword? -string->keyword\n   'simple-keyword? -string->keyword\n   'qualified-keyword? -string->keyword\n\n   'symbol? -string->symbol\n   'simple-symbol? -string->symbol\n   'qualified-symbol? -string->symbol\n\n   'uuid? -string->uuid\n   'double? -number->double\n   'inst? -string->date\n\n   :double -number->double\n   :keyword -string->keyword\n   :symbol -string->symbol\n   :qualified-keyword -string->keyword\n   :qualified-symbol -string->symbol\n   :uuid -string->uuid\n\n   :set -sequential->set})\n\n(defn -json-encoders []\n  {'keyword? m/-keyword->string\n   'simple-keyword? m/-keyword->string\n   'qualified-keyword? m/-keyword->string\n\n   'symbol? -any->string\n   'simple-symbol? -any->string\n   'qualified-symbol? -any->string\n\n   'uuid? -any->string\n\n   :keyword m/-keyword->string\n   :symbol -any->string\n   :qualified-keyword m/-keyword->string\n   :qualified-symbol -any->string\n   :uuid -any->string\n   ;:uri any->string\n   ;:bigdec any->string\n\n   'inst? -date->string\n   #?@(:clj ['ratio? -number->double])})\n\n(defn -string-decoders []\n  (merge\n    (-json-decoders)\n    {'integer? -string->long\n     'int? -string->long\n     'pos-int? -string->long\n     'neg-int? -string->long\n     'nat-int? -string->long\n     'zero? -string->long\n\n     :int -string->long\n     :double -string->double\n     :boolean -string->boolean\n\n     :> -string->long\n     :>= -string->long\n     :< -string->long\n     :<= -string->long\n     := -string->long\n     :not= -string->long\n\n     'number? -string->double\n     'float? -string->double\n     'double? -string->double\n     #?@(:clj ['rational? -string->double])\n     #?@(:clj ['decimal? -string->decimal])\n\n     'boolean? -string->boolean\n     'false? -string->boolean\n     'true? -string->boolean\n\n     :map-of (-transform-map-keys m/-keyword->string)\n     :vector -sequential->vector}))\n\n(defn -string-encoders []\n  (merge\n    (-json-encoders)\n    {'integer? -any->string\n     'int? -any->string\n     'pos-int? -any->string\n     'neg-int? -any->string\n     'nat-int? -any->string\n     'zero? -any->string\n\n     :int -any->string\n     :double -any->string\n     ;:boolean -any->string\n\n     :> -any->string\n     :>= -any->string\n     :< -any->string\n     :<= -any->string\n     := -any->string\n     :not= -any->string\n\n     'double -any->string}))\n\n;;\n;; transformers\n;;\n\n(defn transformer [& ?transformers]\n  (let [->data (fn [ts default name key] {:transformers ts\n                                          :default default\n                                          :key (if name (keyword (str key \"/\" name)))})\n        ->eval (fn [x options] (if (map? x) (reduce-kv (fn [x k v] (assoc x k (m/eval v options))) x x) (m/eval x)))\n        ->chain (m/-comp m/-transformer-chain m/-into-transformer)\n        chain (->> ?transformers (keep identity) (mapcat #(if (map? %) [%] (->chain %))) (vec))\n        chain' (->> chain (mapv #(let [name (some-> % :name name)]\n                                   {:decode (->data (:decoders %) (:default-decoder %) name \"decode\")\n                                    :encode (->data (:encoders %) (:default-encoder %) name \"encode\")})))]\n    (if (seq chain)\n      (reify\n        m/Transformer\n        (-transformer-chain [_] chain)\n        (-value-transformer [_ schema method options]\n          (reduce\n            (fn [acc {{:keys [key default transformers]} method}]\n              (let [options (or options (m/options schema))]\n                (if-let [?interceptor (or (some-> (get (m/properties schema) key) (->eval options))\n                                          (some-> (get (m/type-properties schema) key) (->eval options))\n                                          (get transformers (m/type schema))\n                                          default)]\n                  (let [interceptor (-interceptor ?interceptor schema options)]\n                    (if (nil? acc) interceptor (-interceptor [acc interceptor] schema options)))\n                  acc))) nil chain'))))))\n\n(defn json-transformer\n  ([]\n   (json-transformer nil))\n  ([{::keys [json-vectors map-of-key-decoders] :or {map-of-key-decoders (-string-decoders)}}]\n   (transformer\n     {:name :json\n      :decoders (-> (-json-decoders)\n                    (assoc :map-of {:compile (fn [schema _]\n                                               (or (some-> schema (m/children) (first) (m/type) map-of-key-decoders\n                                                           (m/-comp m/-keyword->string) (-transform-map-keys))\n                                                   (-transform-map-keys m/-keyword->string)))})\n                    (cond-> json-vectors (assoc :vector -sequential->vector)))\n      :encoders (-json-encoders)})))\n\n(defn string-transformer []\n  (transformer\n    {:name :string\n     :decoders (-string-decoders)\n     :encoders (-string-encoders)}))\n\n(defn strip-extra-keys-transformer\n  ([]\n   (strip-extra-keys-transformer nil))\n  ([{:keys [accept] :or {accept (m/-comp #(or (nil? %) (true? %)) :closed m/properties)}}]\n   (let [transform {:compile (fn [schema _]\n                               (if (accept schema)\n                                 (if-let [ks (some->> schema m/entries (map first) seq set)]\n                                   (fn [x] (reduce (fn [acc k] (if-not (ks k) (dissoc acc k) acc)) x (keys x))))))}]\n     (transformer\n       {:decoders {:map transform}\n        :encoders {:map transform}}))))\n\n(defn key-transformer [{:keys [decode encode types] :or {types #{:map}}}]\n  (let [transform (fn [f stage] (if f {stage (-transform-map-keys f)}))]\n    (transformer (cond (set? types) {:decoders (zipmap types (repeat (transform decode :enter)))\n                                     :encoders (zipmap types (repeat (transform encode :leave)))}\n                       (= :default types) {:default-decoder (transform decode :enter)\n                                           :default-encoder (transform encode :leave)}))))\n\n(defn default-value-transformer\n  ([]\n   (default-value-transformer nil))\n  ([{:keys [key defaults] :or {key :default}}]\n   (let [get-default (fn [schema]\n                       (if-some [default (some-> schema m/properties key)]\n                         default\n                         (some->> schema m/type (get defaults) (#(% schema)))))\n         set-default {:compile (fn [schema _]\n                                 (when-some [default (get-default schema)]\n                                   (fn [x] (if (nil? x) default x))))}\n         add-defaults {:compile (fn [schema _]\n                                  (let [defaults (into {}\n                                                       (keep (fn [[k {default key :keys [optional]} v]]\n                                                               (when-not optional\n                                                                 (when-some [default (if (some? default)\n                                                                                       default\n                                                                                       (get-default v))]\n                                                                   [k default]))))\n                                                       (m/children schema))]\n                                    (when (seq defaults)\n                                      (fn [x]\n                                        (if (map? x)\n                                          (reduce-kv\n                                            (fn [acc k v]\n                                              (if-not (contains? x k)\n                                                (assoc acc k v)\n                                                acc))\n                                            x defaults)\n                                          x)))))}]\n     (transformer\n       {:default-decoder set-default\n        :default-encoder set-default}\n       {:decoders {:map add-defaults}\n        :encoders {:map add-defaults}}))))\n\n(defn collection-transformer []\n  (let [coders {:vector -sequential-or-set->vector\n                :sequential -sequential-or-set->seq\n                :set -sequential->set}]\n    (transformer\n      {:decoders coders\n       :encoders coders})))\n"]}