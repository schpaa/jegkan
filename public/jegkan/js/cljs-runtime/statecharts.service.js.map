{"version":3,"sources":["statecharts/service.cljc"],"mappings":"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","names":["statecharts$service$IService$start$dyn","x__4550__auto__","m__4551__auto__","statecharts.service/start","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","statecharts$service$IService$send$dyn","statecharts.service/send","statecharts$service$IService$add_listener$dyn","statecharts.service/add-listener","statecharts$service$IService$reload$dyn","statecharts.service/reload","statecharts.service/IService","this","event","id","listener","fsm","statecharts.service/wrap-listener","f","_","old","new","cljs.core/PROTOCOL_SENTINEL","cljs.core/deref","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","statecharts.service/Service","statecharts.service/->Service","state","running","clock","transition-opts","statecharts.service/attach-fsm-scheduler","cljs.core/reset!","statecharts.impl.initialize","statecharts.impl.transition","cljs.core/add-watch","fsm_","statecharts.service/default-opts","statecharts.clock/wall-clock","var_args","G__67959","statecharts.service/service","js/Error","statecharts.service.service","opts","map__67960","cljs.core/--destructure-map","cljs.core.get","cljs.core.merge","cljs.core.atom","service","cljs.core.assoc","p1__67961#","statecharts.delayed/make-scheduler"],"sourcesContent":["(ns statecharts.service\n  (:require [statecharts.impl :as impl]\n            [statecharts.clock :as clock]\n            [statecharts.delayed :as fsm.d])\n  (:refer-clojure :exclude [send]))\n\n(defprotocol IService\n  (start [this])\n  (send [this event])\n  (add-listener [this id listener])\n  (reload [this fsm]))\n\n(declare attach-fsm-scheduler)\n\n(defn wrap-listener [f]\n  (fn [_ _ old new]\n    (f old new)))\n\n(deftype Service [^:volatile-mutable fsm\n                  state\n                  ^:volatile-mutable running\n                  clock\n                  transition-opts]\n  IService\n  (start [this]\n    (when-not running\n      (set! running true)\n      (set! fsm (attach-fsm-scheduler this fsm))\n      (reset! state (impl/initialize fsm))\n      @state))\n  (send [_ event]\n    (reset! state (impl/transition fsm @state event transition-opts))\n    @state)\n  (add-listener [_ id listener]\n    (add-watch state id (wrap-listener listener)))\n  (reload [this fsm_]\n    (set! fsm (attach-fsm-scheduler this fsm_))\n    nil))\n\n(defn default-opts []\n  {:clock (clock/wall-clock)})\n\n(defn service\n  ([fsm]\n   (service fsm nil))\n  ([fsm opts]\n   (let [{:keys [clock\n                 transition-opts]} (merge (default-opts) opts)]\n     (Service. fsm\n               ;; state\n               (atom nil)\n               ;; running\n               false\n               clock\n               transition-opts))))\n\n(defn attach-fsm-scheduler [service fsm]\n  (assoc fsm :scheduler (fsm.d/make-scheduler\n                         ;; dispatch\n                         #(send service %)\n                         ;; clock\n                         (.-clock ^Service service))))\n"]}